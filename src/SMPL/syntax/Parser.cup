package SMPL.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SMPL.values.*;
import SMPL.semantics.*;


/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Encountered token " + cur_token +
					": " + lexer.getText());
		}
	    :};

/* Terminals (tokens returned by the scanner). */
// commands
terminal PAIR, ISPAIR, CAR, CDR, LIST, SIZE, ISEQV, ISEQUAL, SUBSTR, ELIST;

// special symbols
terminal LPAREN, RPAREN, COLON, LBRACE, RBRACE, LBRACK, RBRACK, COMMA, SEMI, DOT;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, EXP, UMINUS, UPLUS;
// bitwise bool
terminal BITAND, BITOR, BITNOT;
// logical operators
terminal LESS, MORE, EQUAL, LRE, MRE, NE;
// boolean symbols
terminal NOT, AND, OR;
// other operator
terminal CONCAT, ASSIGN;

// other commands
terminal DEFINE, LET, PROC, CALL, LAZY, CASE;
terminal PROCEDURE, IF, THEN, ELSE;
terminal PRINT, PRINTLN, READ, READINT, LCOMMENT, SCOMMENT, ECOMMENT;

// terminals with values
terminal Integer INT;
terminal String BINARY;
terminal String HEX;
terminal Boolean TRUE;
terminal Boolean FALSE;
terminal Double FLOAT;
terminal String ID;
terminal String STR;
terminal String COMMENT;
terminal String CHAR;
terminal String UNI;

/* Non terminals */
non terminal ASTProgram program;
non terminal ASTExpSequence expSeq;
non terminal ASTExpSequence cmpndExp;
non terminal ASTExp stmt;
non terminal ASTExp nonStmt;
non terminal ASTExp condition;
non terminal ASTExp alt;
non terminal ASTExp proc;
non terminal ASTExp def;

non terminal ArrayList<ASTExp> expList;
non terminal ASTExp expression;
non terminal ASTExp valExp;
non terminal ASTExp signedVal;
non terminal ASTExp fnCall;
non terminal ASTExp procStmt;
non terminal ASTExp ifStmt;
non terminal ASTExp defStmt;
non terminal ASTExp caseExp;
non terminal ASTExp letExp;
non terminal ASTExp exp;
non terminal ASTExp term;
non terminal ASTExp factor;
non terminal ASTExp andExp;
non terminal ASTExp notExp;
non terminal ASTExp logExp;
non terminal ASTExp bitLog;
non terminal ASTExp bitNeg;
non terminal Binding binding;
non terminal Clause pred;
non terminal ASTExp sysExp;
non terminal ArrayList<Binding> bindings;
non terminal ArrayList<Clause> predList;
non terminal ArrayList<Clause> predListAux;
non terminal PrimitiveValue primitive;
non terminal ArrayList<String> idList;
non terminal ArrayList<String> idListAux;
non terminal empty;

precedence left LPAREN,SEMI;

/* Grammar rules */

program ::= expSeq:l  {: RESULT = new ASTProgram(l); :};
          
expSeq ::= expSeq:l exp:e {: l.add(e); RESULT = l;:} |
            exp:e {: RESULT = new ASTExpSequence(e); :};

exp ::= stmt:s {: RESULT = s; :} |
        nonStmt:s {: RESULT = s; :};

nonStmt ::= valExp:v {: RESULT = v; :}|
            COMMENT:c {: RESULT = new ASTComment(c); :};

stmt ::= def:d {: RESULT = d; :}|
         sysExp:s {: RESULT = s; :}|
         valExp:v SEMI {: RESULT = v; :};

def ::= DEFINE ID:i defStmt:e SEMI{:
                RESULT = new ASTDefine(i,e);
                :}|
         idList:i ASSIGN defStmt:e SEMI{:
                RESULT = new ASTDefine(i,e);
                :};

defStmt ::= valExp:v {: RESULT = v; :}|
            proc:p {: RESULT = p; :};

proc ::= PROCEDURE LPAREN idList:id RPAREN procStmt:l {:
                    RESULT = new ASTProcDef(id,l);
                :}|
         PROCEDURE LPAREN RPAREN procStmt:l {:
                    ArrayList<String> id = new ArrayList<>();
                    RESULT = new ASTProcDef(id,l);
                :}|
        PROCEDURE LPAREN idList:id DOT ID:i RPAREN procStmt:l {:
                    RESULT = new ASTProcDef(id,i,l);
                :}|
         PROCEDURE ID:id procStmt:l {:
                    RESULT = new ASTProcDef(id,l);
                :}
                ; 

idList ::=  ID:i idListAux:l{:
                    l.add(i);
                    RESULT = l;
                :};

idListAux ::= COMMA ID:i idListAux:l {:
                    l.add(i);
                    RESULT = l;
                :} |
            empty {: RESULT = new ArrayList<String>();:}
                ;

procStmt ::= condition:c {: RESULT = c; :}|
             alt:a {: RESULT = a; :};

condition ::= IF valExp:e THEN condition:s ELSE condition:f {:
                    RESULT = new ASTConditional(e,new ASTExpSequence(s),
                                                    new ASTExpSequence(f));
                :}|
                ifStmt:i {: RESULT = i; :};

alt ::= IF valExp:e THEN procStmt:s {:
                    RESULT = new ASTConditional(e,new ASTExpSequence(s));
                :}|
            IF valExp:e THEN condition:s ELSE alt:f {:
                    RESULT = new ASTConditional(e,new ASTExpSequence(s),
                                                    new ASTExpSequence(f));
                :};

ifStmt ::= valExp:v {: RESULT = v; :}|
           sysExp:s {: RESULT = s; :}|
           def:d {: RESULT = d; :}|
           COMMENT:c {: RESULT = new ASTComment(c); :}|
           letExp:l {: RESULT = l; :}|
           caseExp:c {: RESULT = c; :};

caseExp ::= CASE LBRACK predList:p  RBRACK {:
                    RESULT = new ASTCase(p);
                :};

letExp ::=  LET LPAREN bindings:b RPAREN valExp:v {:
                    RESULT = new ASTLet(b,v);
                :};

predList ::= pred:p predListAux:l {:
                    l.add(p);
                    RESULT = l;
                :}; 

predListAux ::= COMMA pred:p predListAux:l {:
                    l.add(p);
                    RESULT=l;
                :}|
             empty {: RESULT = new ArrayList<Clause>(); :};

pred ::= valExp:b COLON valExp:v {:
                    RESULT = new Clause(b,v);
                :}|
         ELSE COLON  valExp:v {:
                    RESULT = new Clause(new ASTExpLit(PrimitiveValue.make(true)),v);
                :};

bindings ::= bindings:bl COMMA binding:b {:
                    bl.add(b);
                    RESULT = bl;
                :} |
             binding:b {:
                    ArrayList<Binding> bl = new ArrayList<Binding>();
                    bl.add(b);
                    RESULT = bl;
                :};

binding ::= ID:i EQUAL valExp:v {:
                RESULT = new Binding(i,v);
             :};


sysExp ::= READ LPAREN RPAREN SEMI {:
                    RESULT = new ASTRead();
                :}|
           READINT LPAREN RPAREN SEMI {:
                    RESULT = new ASTReadInt();
                :}|
           PRINT LPAREN valExp:e RPAREN SEMI {:
                    RESULT = new ASTPrint(e);
                :}|
           PRINTLN LPAREN valExp:e RPAREN SEMI {:
                    RESULT = new ASTPrintLn(e);
                :};

valExp ::= valExp:log OR andExp:le {:
                RESULT = new ASTExpOr(log,le);
            :} |
            andExp:e {: RESULT = e; :};

andExp ::= andExp:log AND notExp:le {:
                RESULT = new ASTExpAnd(log,le);
            :} |
            notExp:e {: RESULT = e; :};

notExp ::= NOT logExp:log {: RESULT = new ASTExpNot(log); :} |
            logExp:log {: RESULT = log; :};

logExp ::= logExp:e LESS bitLog:ex {:
                RESULT = new ASTExpLess(e,ex);
            :} |
           logExp:e MORE bitLog:ex {:
                RESULT = new ASTExpMore(e,ex);    
            :} |
           logExp:e EQUAL bitLog:ex {:
                RESULT = new ASTExpEqual(e,ex);
            :} |
           logExp:e LRE bitLog:ex {:
                RESULT = new ASTExpLRE(e,ex);
            :} |
           logExp:e MRE bitLog:ex {:
                RESULT = new ASTExpMRE(e,ex);
            :} |
           logExp:e NE bitLog:ex {:
                RESULT = new ASTExpNE(e,ex);
            :}|
            bitLog:b {: RESULT = b; :};

bitLog ::= bitLog:b BITAND expression:e {:
                    RESULT = new ASTBitAnd(b,e); 
            :} |
            bitLog:b BITOR expression:e {:
                    RESULT = new ASTBitOr(b,e);
            :} |
            expression:b {: RESULT = b; :};

expression ::= 	expression:e PLUS term:t {:
			RESULT = new ASTExpAdd(e, t); :} |
		expression:e MINUS term:t {:
			RESULT = new ASTExpSub(e, t); :} |
		term:t {: RESULT = t; :};

term ::= term:t EXP bitNeg:f {:
                RESULT = new ASTExpPow(t,f); :} |
         term:t MUL bitNeg:f {:
		RESULT = new ASTExpMul(t, f); :} |
	 term:t DIV bitNeg:f {:
		RESULT = new ASTExpDiv(t, f); :} |
	 term:t MOD bitNeg:f {:
		RESULT = new ASTExpMod(t, f); :} |
         bitNeg:b {: RESULT = b; :};

bitNeg ::= BITNOT factor:f {: RESULT = new ASTBitNot(f); :} |
            factor:f {: RESULT = f; :};

factor ::= primitive:ilit {: RESULT = new ASTExpLit(ilit); :} |
           ID:v {: RESULT = new ASTExpVar(v); :}|
           STR:s {: RESULT = new ASTExpStr(s); :} |
           CHAR:c {: RESULT = new ASTExpChar(c); :} |
           UNI:u {: RESULT = new ASTExpChar(u); :} |
	   LPAREN valExp:e RPAREN {: RESULT = e; :} |
           LBRACE valExp:e RBRACE {: RESULT = e; :}|
           LAZY LPAREN valExp:e RPAREN {: RESULT = new ASTLazyExp(e); :}|
           fnCall:f {:RESULT = f; :}|
           signedVal:s {: RESULT = s; :};

fnCall ::= CALL LPAREN ID:i COMMA valExp:v RPAREN {:
                        ArrayList<ASTExp> args = new ArrayList<>();
                        args.add(v);
                        RESULT= new ASTProcCall(i,args);
                :}|
           ID:i LPAREN expList:l RPAREN {:
                    RESULT = new ASTProcCall(i,l);
                :};

signedVal ::=   UMINUS ID:i {: RESULT = new ASTExpVar(true,i); :}|
                UMINUS INT:i {: RESULT = new ASTExpLit(PrimitiveValue.make(-i)); :}|
                UMINUS FLOAT:i {: RESULT = new ASTExpLit(PrimitiveValue.make(-i)); :}|
                UPLUS ID:i {: RESULT = new ASTExpVar(i); :}|
                UPLUS INT:i {: RESULT = new ASTExpLit(PrimitiveValue.make(i)); :}|
                UPLUS FLOAT:i {: RESULT = new ASTExpLit(PrimitiveValue.make(i)); :};

primitive ::= INT:i {: RESULT = PrimitiveValue.make(i); :} |
              HEX:h {: RESULT = PrimitiveValue.make(h); :} |
              BINARY:b {: RESULT = PrimitiveValue.make(b); :} |
              TRUE {: RESULT = PrimitiveValue.make(true); :} |
              FALSE {: RESULT = PrimitiveValue.make(false); :} |
              FLOAT:r {: RESULT = PrimitiveValue.make(r); :};

expList ::= valExp:e COMMA expList:lst {:
	    	lst.add(e);
		RESULT = lst;
	    :} |
	    valExp:e {:
	       	ArrayList<ASTExp> lst = new ArrayList<>();
		lst.add(e);
		RESULT = lst;
	    :}|
	     empty {: RESULT = new ArrayList<ASTExp>(); :};

empty ::= ;