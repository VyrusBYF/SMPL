package SMPL.syntax;

/* Specification for SMPL tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives
%%
    
%cup
%public

%class SMPLLexer

%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%eofclose false

%char
%column
%line

%{
    StringBuffer string = new StringBuffer();

    java.nio.IntBuffer bin = java.nio.IntBuffer.allocate(1);

    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
      }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
      }
%}

nl = [\n\r]

cc = ([\b\f]|{nl})

hs = [ ]|[\t] 

ws = {cc}|[\t]|[\s]

alpha = [a-zA-Z_]

num = [0-9]

symbols = [^0-9a-zA-Z\(\)\{\}\[\]\"\'\,\:\s]

strt = [^\(\)\{\}\[\]\"\'\,\:\s\#]

nonDig = [^\(\)\{\}\[\]\"\'\,\:\s\#0-9]

alphanum = {alpha}|{num}

alphanumsym = {alphanum}|{symbols} 

alphasym = {alpha}|{nonDig}

lcomment = [^\n\r]

comment = [^]

%state STRING
%state BIN 
%state HEX
%state CHAR
%state UNI
%state CHARA

%%

<YYINITIAL>	{nl}	{
                        //skip newline, but reset char counter
			yycolumn = 0;
			}
<YYINITIAL>	{ws}	{
                        //skip whitespace
			}

<YYINITIAL>	{ws}+"+"{ws}+	{return new Symbol(sym.PLUS);}
<YYINITIAL>	{ws}+"-"{ws}+   {return new Symbol(sym.MINUS);}
<YYINITIAL>	{ws}+"*"{ws}+   {return new Symbol(sym.MUL);}
<YYINITIAL>	{ws}+"/"{ws}+   {return new Symbol(sym.DIV);}
<YYINITIAL>	{ws}+"%"{ws}+   {return new Symbol(sym.MOD);}
<YYINITIAL>     {ws}+"^"{ws}+   {return new Symbol(sym.EXP);}

<YYINITIAL>	"-"{ws}+        {return new Symbol(sym.UMINUS);}
<YYINITIAL>	"+"{ws}+        {return new Symbol(sym.UPLUS);}

<YYINITIAL>	{ws}+"&"{ws}+   {return new Symbol(sym.BITAND);}
<YYINITIAL>	{ws}+"|"{ws}+   {return new Symbol(sym.BITOR);}
<YYINITIAL>	{ws}+"~"{ws}+   {return new Symbol(sym.BITNOT);}

<YYINITIAL>	{ws}+"="{ws}+   {return new Symbol(sym.EQUAL);}
<YYINITIAL>	{ws}+">"{ws}+   {return new Symbol(sym.MORE);}
<YYINITIAL>	{ws}+"<"{ws}+   {return new Symbol(sym.LESS);}
<YYINITIAL>	{ws}+"<="{ws}+  {return new Symbol(sym.LRE);}
<YYINITIAL>	{ws}+">="{ws}+  {return new Symbol(sym.MRE);}
<YYINITIAL>	{ws}+"!="{ws}+  {return new Symbol(sym.NE);}

<YYINITIAL>	{ws}+":="{ws}+  {return new Symbol(sym.ASSIGN);}
<YYINITIAL>	{ws}+"@"{ws}+   {return new Symbol(sym.CONCAT);}

<YYINITIAL>	"("             {return new Symbol(sym.LPAREN);}
<YYINITIAL>	")"             {return new Symbol(sym.RPAREN);}
<YYINITIAL>     "{"             {return new Symbol(sym.LBRACK);}
<YYINITIAL>     "}"             {return new Symbol(sym.RBRACK);}
<YYINITIAL>	"["             {return new Symbol(sym.LBRACE);}
<YYINITIAL>	"]"             {return new Symbol(sym.RBRACE);}

<YYINITIAL>	","             {return new Symbol(sym.COMMA);}
<YYINITIAL>	":"             {return new Symbol(sym.COLON);}
<YYINITIAL>	";"             {return new Symbol(sym.SEMI);}
<YYINITIAL>     {ws}+"."{ws}+   {return new Symbol(sym.DOT);}

<YYINITIAL>	"pair"          {return new Symbol(sym.PAIR);}
<YYINITIAL>	"car"           {return new Symbol(sym.CAR);}
<YYINITIAL>	"cdr"           {return new Symbol(sym.CDR);}
<YYINITIAL>	"pair?"         {return new Symbol(sym.ISPAIR);}
<YYINITIAL>	"list"          {return new Symbol(sym.LIST);}
<YYINITIAL>	"size"          {return new Symbol(sym.SIZE);}
<YYINITIAL>	"eqv?"          {return new Symbol(sym.ISEQV);}
<YYINITIAL>	"equal?"	{return new Symbol(sym.ISEQUAL);}
<YYINITIAL>	"substr"	{return new Symbol(sym.SUBSTR);}

<YYINITIAL>	"let"           {return new Symbol(sym.LET);}
<YYINITIAL>	"proc"          {return new Symbol(sym.PROCEDURE);}
<YYINITIAL>	"call"          {return new Symbol(sym.CALL);}
<YYINITIAL>	"def"           {return new Symbol(sym.DEFINE);}
<YYINITIAL>	"if"            {return new Symbol(sym.IF);}
<YYINITIAL>	"then"          {return new Symbol(sym.THEN);}
<YYINITIAL>     "else"          {return new Symbol(sym.ELSE);}
<YYINITIAL>	"lazy"          {return new Symbol(sym.LAZY);}
<YYINITIAL>	"case"          {return new Symbol(sym.CASE);}

<YYINITIAL>	"and"           {return new Symbol(sym.AND);}
<YYINITIAL>	"or"            {return new Symbol(sym.OR);}
<YYINITIAL>	"not"           {return new Symbol(sym.NOT);}

<YYINITIAL>	"print"         {return new Symbol(sym.PRINT);}
<YYINITIAL>	"println"       {return new Symbol(sym.PRINTLN);}
<YYINITIAL>	"read"          {return new Symbol(sym.READ);}
<YYINITIAL>	"readint"       {return new Symbol(sym.READINT);}

<YYINITIAL>	"#t"            {return new Symbol(sym.TRUE);}
<YYINITIAL>	"#f"            {return new Symbol(sym.FALSE);}

<YYINITIAL>	"#e"            {return new Symbol(sym.ELIST);}

<YYINITIAL>     {num}+          {
                                // INTEGER
                                return new Symbol(sym.INT, 
                                    new Integer(yytext()));
                                }

<YYINITIAL>    [\.]{num}+|{num}+[\.]{num}* 	
                                {
                                // FLOAT
                                return new Symbol(sym.FLOAT, 
			 	         new Double(yytext()));
                                }

<YYINITIAL>    {strt}{alphanumsym}*{alphasym}+{alphanumsym}*|{alphasym}
                                {
                                // VARIABLE
                                return new Symbol(sym.ID, yytext());
                                }

 <YYINITIAL>    "//"{hs}+{lcomment}+|"/*"{ws}+{comment}+{ws}+"*/"       
                                {
                                // COMMENT
                                return new Symbol(sym.COMMENT, yytext());
                                } 

<YYINITIAL>    "#b"             { string.setLength(0); yybegin(BIN); }

<YYINITIAL>    "#x"             { string.setLength(0); yybegin(HEX); }

<YYINITIAL>    "#u"             { string.setLength(0); yybegin(UNI); }

<YYINITIAL>    "#c"             { string.setLength(0); yybegin(CHARA); }

<YYINITIAL>    \"               { string.setLength(0); yybegin(STRING); }

<YYINITIAL>    \'               { string.setLength(0); yybegin(CHAR); }


<BIN> {
      [^01]                        {yybegin(YYINITIAL); 
                                    return symbol(sym.BINARY, 
                                    string.toString()); }
      [01]+                       { string.append("#b"+yytext()); }
    }

<HEX> {
      [^0-9a-fA-F]                {yybegin(YYINITIAL); 
                                    return symbol(sym.HEX, 
                                    string.toString()); }
      [0-9a-fA-F]+                 { string.append("#x"+yytext()); }
      }

<UNI> {
      [^0-9a-fA-F]                {yybegin(YYINITIAL); 
                                    return symbol(sym.UNI, 
                                    string.toString()); }
      [0-9a-fA-F]{4}               { string.append(yytext()); }
      }

<STRING> {
      \"                        {yybegin(YYINITIAL); 
                                    return symbol(sym.STR, 
                                    string.toString()); }
      [^\n\r\"\\]+              { string.append( yytext() ); }
      \\t                       { string.append('\t'); }
      \\n                       { string.append('\n'); }
      \\r                       { string.append('\r'); }
      \\\"                      { string.append('\"'); }
      \\                        { string.append('\\'); }
    }

<CHAR> {
      \'                        {yybegin(YYINITIAL); 
                                    return symbol(sym.CHAR, 
                                    string.toString()); }
      [^\n\r\"\\]               { string.append( yytext() ); }
      \\t                       { string.append('\t'); }
      \\n                       { string.append('\n'); }
      \\r                       { string.append('\r'); }
      \\\"                      { string.append('\"'); }
      \\                        { string.append('\\'); }
    }

<CHARA> {
      [\s]                      {yybegin(YYINITIAL); 
                                    return symbol(sym.CHAR, 
                                    string.toString()); }
      [^\n\r\\]                 { string.append( yytext() ); }
      \\t                       { string.append('\t'); }
      \\n                       { string.append('\n'); }
      \\r                       { string.append('\r'); }
      \\                        { string.append('\\'); }
    }