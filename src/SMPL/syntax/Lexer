package SMPL.syntax;

/* Specification for SMPL tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives
%%
    
%cup
%public

%class SMPLLexer

%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%eofclose false

%char
%column
%line

%{
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }
%}

nl = [\n\r]

cc = ([\b\f]|{nl})

ws = {cc}|[\t]|[\s]

alpha = [a-zA-Z_]

num = [0-9]

bin = [0-1]

hex = {num}|[a-fA-F]

symbols = [\*\+\?\-\\\/\^\%\&\|\~\=\<\>\!\@\:\(\)\[\]\{\}\.]

dq = [\"]

sq = [\']

alphanum = {alpha}|{num}|{symbols}

strng = {alphanum}|[\\]|[\\n]|[\\t]

%%

<YYINITIAL>	{nl}	{
                        //skip newline, but reset char counter
			yycolumn = 0;
			}
<YYINITIAL>	{ws}	{
                        //skip whitespace
			}

<YYINITIAL>	{ws}+"+"{ws}+	{return new Symbol(sym.PLUS);}
<YYINITIAL>	{ws}+"-"{ws}+   {return new Symbol(sym.MINUS);}
<YYINITIAL>	{ws}+"*"{ws}+   {return new Symbol(sym.MUL);}
<YYINITIAL>	{ws}+"/"{ws}+   {return new Symbol(sym.DIV);}
<YYINITIAL>	{ws}+"%"{ws}+   {return new Symbol(sym.MOD);}
<YYINITIAL>	{ws}+"^"{ws}+   {return new Symbol(sym.EXP);}

<YYINITIAL>	{ws}+"&"{ws}+   {return new Symbol(sym.BITAND);}
<YYINITIAL>	{ws}+"|"{ws}+   {return new Symbol(sym.BITOR);}
<YYINITIAL>	{ws}+"~"{ws}+   {return new Symbol(sym.BITNOT);}

<YYINITIAL>	{ws}+"="{ws}+   {return new Symbol(sym.EQUAL);}
<YYINITIAL>	{ws}+">"{ws}+   {return new Symbol(sym.MORE);}
<YYINITIAL>	{ws}+"<"{ws}+   {return new Symbol(sym.LESS);}
<YYINITIAL>	{ws}+"<="{ws}+  {return new Symbol(sym.LRE);}
<YYINITIAL>	{ws}+">="{ws}+  {return new Symbol(sym.MRE);}
<YYINITIAL>	{ws}+"!="{ws}+  {return new Symbol(sym.NE);}

<YYINITIAL>	{ws}+"@"{ws}+   {return new Symbol(sym.CONCAT);}

<YYINITIAL>	"("             {return new Symbol(sym.LPAREN);}
<YYINITIAL>	")"             {return new Symbol(sym.RPAREN);}

<YYINITIAL>	"["             {return new Symbol(sym.LBRACE);}
<YYINITIAL>	"]"             {return new Symbol(sym.RBRACE);}

<YYINITIAL>	","             {return new Symbol(sym.COMMA);}
<YYINITIAL>	":"             {return new Symbol(sym.COLON);}
<YYINITIAL>	";"             {return new Symbol(sym.SEMI);}

<YYINITIAL>	"pair"          {return new Symbol(sym.PAIR);}
<YYINITIAL>	"car"           {return new Symbol(sym.CAR);}
<YYINITIAL>	"cdr"           {return new Symbol(sym.CDR);}
<YYINITIAL>	"pair?"         {return new Symbol(sym.ISPAIR);}
<YYINITIAL>	"list"          {return new Symbol(sym.LIST);}
<YYINITIAL>	"size"          {return new Symbol(sym.SIZE);}
<YYINITIAL>	"eqv?"          {return new Symbol(sym.ISEQV);}
<YYINITIAL>	"equal?"	{return new Symbol(sym.ISEQUAL);}
<YYINITIAL>	"substr"	{return new Symbol(sym.SUBSTR);}

<YYINITIAL>	"let"           {return new Symbol(sym.LET);}
<YYINITIAL>	"proc"          {return new Symbol(sym.PROCEDURE);}
<YYINITIAL>	"call"          {return new Symbol(sym.CALL);}
<YYINITIAL>	"def"           {return new Symbol(sym.DEFINE);}
<YYINITIAL>	"if"            {return new Symbol(sym.IF);}
<YYINITIAL>	"then"          {return new Symbol(sym.THEN);}
<YYINITIAL>	"lazy"          {return new Symbol(sym.LAZY);}
<YYINITIAL>	"case"          {return new Symbol(sym.CASE);}

<YYINITIAL>	"and"           {return new Symbol(sym.AND);}
<YYINITIAL>	"or"            {return new Symbol(sym.OR);}
<YYINITIAL>	"not"           {return new Symbol(sym.NOT);}

<YYINITIAL>	"print"         {return new Symbol(sym.PRINT);}
<YYINITIAL>	"println"       {return new Symbol(sym.PRINTLN);}
<YYINITIAL>	"read"          {return new Symbol(sym.READ);}
<YYINITIAL>	"readint"       {return new Symbol(sym.READINT);}

<YYINITIAL>	"#t"            {return new Symbol(sym.TRUE);}
<YYINITIAL>	"#f"            {return new Symbol(sym.FALSE);}

<YYINITIAL>	"#e"            {return new Symbol(sym.ELIST);}

<YYINITIAL>   [\-]{num}+|{num}+ {
                                // INTEGER
                                return new Symbol(sym.INT, 
                                    new Integer(yytext()));
                                }

<YYINITIAL>    "#b"{bin}+           {
                                // BINARY
                                return new Symbol(sym.BINARY, 
                                    new Integer(yytext()));
                                }

<YYINITIAL>    "#x""0x"{hex}+   {
                                // HEXADECIMAL
                                return new Symbol(sym.HEX, 
                                    new Integer(yytext()));
                                }

<YYINITIAL>  {num}*[\.]{num}+|{num}+[\.]{num}* 	{
			 // FLOAT
	       		 return new Symbol(sym.FLOAT, 
			 	         new Double(yytext()));
	       		}

<YYINITIAL>    {alpha}{alphanum}* {
	       // VARIABLE
	       return new Symbol(sym.ID, yytext());
	       }

<YYINITIAL>    {dq}{1}{strng}{dq}{1} {
	       // STRING CONSTANT
	       return new Symbol(sym.CON, yytext());
	       }

<YYINITIAL>    {sq}{1}{strng}{1}{sq}{1} {
	       // CHARACTER LITERALS
	       return new Symbol(sym.CHAR, yytext());
	       }

<YYINITIAL>    {sq}{1}"#u"{hex}{4}{sq}{1} {
	       // UNICODE CHARACTERS
	       return new Symbol(sym.UNI, yytext());
	       }